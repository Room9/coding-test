[그리디]
# change.py
나누기 몫 // , 나누기 나머지 %

# big_number.py
1. 제일 큰 수 2개만 뽑아서 1등 큰 수 k번 더하고 2등 큰 수 1번 더하기를 M번 채워지는지 확인하면서 반복(while True ~ break)
2. k+1개씩 한 쌍으로 묶을 수 있다, 나누기 몫 // , 나누기 나머지 %

# number_card.py
for 과 min(), max() 이용해 가장 작은 것, 가장 큰 것을 비교를 통해 지속 업데이트

# until_1.py
나누기 몫, 나머지를 이용한 cnt
모든 숫자는 다음과 같은 형태로 나타낼 수 있다. b=a*몫+나머지

[구현]
(시뮬레이션)
# udlr.py
(중요) 좌표 내 시뮬레이션 구현 기본 형태1
- 좌표표현 : (1,1) ~ (n,n)
- 이동타입 : dx,dy로 표현, 우측부터 반시계형태로 알아놓을 것
    dx = [0,-1,0,1]
    dy = [1,0,-1,0]
    move_types = ['R','U','L','D']
- 이동방향 확인 :
    for i in range(len(move_types)):
        if plan == move_types[i]:
            nx = x + dx[i]
            ny = y + dy[i]
- 공간을 벗어나는 경우 무시
    if nx < 1 or ny < 1 or nx > n or ny > n:
        continue
- 실제 이동 수행
    x, y = nx, ny

# knight_of_palace.py
(중요) 좌표 내 시뮬레이션 구현 기본 형태1
- 좌표표현 : (1,1) ~ (n,n)
- 이동타입 : dx,dy 대신 이동가능한 범위에 대해 tuple 쌍으로 표현
    steps = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)]
- 이동경우 확인 :
    for step in steps:
        # 이동하고자 하는 위치 확인
        next_row = row + step[0]
        next_column = column + step[1]
- 공간을 벗어나는 경우 무시
    if next_row >= 1 and next_row <= 8 and next_column >= 1 and next_column <= 8:
        result += 1

# game_dev.py
    - 방문한 위치를 저장하기 위한 맵을 생성하여 0으로 초기화
    d = [[0]*m for _ in range(n)]

    - 현재 캐릭터의 X 좌표, Y 좌표, 방향을 입력받기
    x, y, direction = map(int, input().split())

    - 전체 맵 정보를 입력받기
    array = []
    for i in range(n):
    array.append(list(map(int, input().split())))

    - 왼쪽으로 회전 : 반시계 방향으로 direction(dx,dy의 인덱스) 이동
    위에서 정의한 direction을 전역변수 global로 받겠다
    서 : 3, 남 : 2, 동 : 1, 북 : 0 문제에서 정의됨
    북, 동, 남, 서 방향 정의 : index -1로 가면 왼쪽으로 가도록 정렬

    -  네방향 모두 못가는지 확인하기 위한 기준변수

    1. 왼쪽으로 회전
    2. 회전한 이후 정면에 가보지 않은 칸이 존재하는 경우 이동
        회전한 이후 정면에 가보지 않은 칸이 없거나 바다인 경우
    3. 네 방향 모두 갈 수 없는 경우
    뒤로간다 = 현재 방향으로 앞으로 가는 것을 뺀다!
    뒤로 갈 수 있다면 이동하기
    뒤가 바다로 막혀있는 경우

(완전탐색)
# time_cnt.py
완전탐색 / 3중 for 구문 / max 데이터 연산 확인 시 100만개 이하









